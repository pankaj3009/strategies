# The TradeTimeZone should specify the timezone in which the start and end time are specified.
# The program will start placing orders from the StartTime and the last order (if any) will be placed 
# before the EndTime
# ShutDownTime triggers EOD reporting. The progam will be scheduled for shutdown 4 minutes after ShutDownTime

TradeTimeZone=Asia/Kolkata
StartTime=9:30:00
EndTime=15:58:00
ShutDownTime=16:01:00

# The minimum ticksize supported by the market
TickSize=0.01

# value of each ticksize. This is used for calculating p&l
# for a ticksize of 0.05 and a pointvalue of 1, the profit
# will change by 0.05*2 = 0.10 for each 0.05 change in price
PointValue=1

# Brokerage rates applicable to the market should be provided in a brokerage file
BrokerageFile=usdstkbrokerage.txt

# Checks for ensuring rogue orders
# if pricecheck is set as true, inStrat will check if there is an "appropriate" price in the market.
# if the order is a buy or cover order, a bid needs to be available for the symbol.
# if the order is a sell or a short order, an ask needs to be available for the symbol
pricecheck=true
# The value of an is arrived at by multiplying the order size * point value * appropriate price. 
# An order will be sent to the broker only if the calculated value of the order <= maxordervalue
maxordervalue = 1000000

# ClawProfitTarget squares all positions if the accumulated profit for the day execeeds ClawProfitTarget.
# If ClawProfitTarget is set to 0, this property is not used. 
# Generally should be used only in an intra-day strategy. 
# Strategy continues to trade for the day after all positions have been squared off.
ClawProfitTarget=0

# DayProfitTarget squares all positions if the accumulated profit for the day execeeds DayProfitTarget.
# If DayProfitTarget is set to 0, this property is not used. 
# Generally should be used only in an intra-day strategy. 
# Strategy stops trading for the day once the DayProfitTarget has been hit.
DayProfitTarget=0

# DayStopLoss squares all positions if the accumulated loss for the day execeeds DayStopLoss.
# If DayStopLoss is set to 0, this property is not used. 
# Generally should be used only in an intra-day strategy. 
# Strategy stops trading for the day once the DayStopLoss has been hit.
DayStopLoss=0

# MaximumOpenPositions defines the maximum number of open positions that are allowed
# for the strategy. Generally, this parameter prevents any ugly un-intended accumulation of positions.
# For the purpose of max open positions, each filled trade in the trade log is considered a position.
# So if there are 10 open trades on the same symbol over a period of time, MaximumOpenPositions will have an
# internal value of 10. 
MaximumOpenPositions=100

# StartingCapital denotes the maximum capital allocated to the strategy and is used for
# calculating the sharpe ratio of the strategy.
StartingCapital=40000000

# If Long is set as true, then the strategy will take long positions. This property value can be changed from the UI of inStrat
Long=true

# If Short is set as true, the strategy will take short positions. This property value can be changed from the UI of inStrat
Short=true

# These properties for used when inStrat is trading options.
# If inStrat is required to calculated option prices using volatility, the underlying may either
# be a cash instrutment or a future. OptionPricingUsingFutures is set as TRUE if the underlying is a future.
# Else it should be set as False
OptionPricingUsingFutures=TRUE

# If [R] is being used to generate signals, the following parameters are required to be specified.
# Server where [R] is running
RServerIP=127.0.0.1
# Working directory for [R]. This is also the directory where the [R] script is expected.
wd=/home/psharma/strategies/rscripts/yga
# The time (in TradeTimeZone) for invoking the [R] script
ScanStartTime=15:05:00
# Name of the [R] Script file that will be invoked.
RStrategyFile=RFileName.R


# Redis database used for the strategy
# All **ORDERS** generated by the  strategy will be placed in the specified redisdborder of Redis. 
# inStrat carries both an order log as well as a trade log. Order log is in the database id defined in the url string below. The trade log
# is always in database given by redisdbtrade (redisdbtrade is specifed in globalparameters.txt)
redisip=127.0.0.1
redisport=6377
# redis database that will store the executed orders/trades.
redisdborder=8


# OrderSource specifies if instrat will accept orders sent as a text file
# If ordersource=file, instrat will red the text file and place the order in a correponding redis database
# This parameter is just a helper function to insert orders in redis from a local directory.
# if any strategy has OrderSource=file, then all strategies by default will accept file as an ordersource
# in addition to redis.
OrderSource=file

# if OrderSource is file, the dir parameter specifies the directory to watch for any addition of order files.
# You should specify the same directory for every strategy. Specifying different directories for strategies
# will have unexpected results.
dir=



# OrderType determines the type of order that is defaulted for the strategy.
# At the simplest level, you can specify OrderType = One of the valid order types from IB.
# The following order types from Interactive Brokers are currently supported
# LMT,MKT,STPLMT,STP,REL
# If you want to use any other IB order type, please add it to EnumOrderType.java file
# inStrat also allows you to develop your own custom order type. Currently one custom order type is in the 
# public domain: CUSTOMREL.
# CUSTOMREL is simliar to TWS REL order type but it can be applied to any market. In addition, the CUSTOMREL introduces some
# randomness in the placement of bids/asks so that fills are more effective for illiquid securities. 
# Order Attributes are specified as a colon (:) delimited, name = value string.
# The simplest specification could be
# OrderType=CUSTOMREL
# OrderType = MKT
# For user defined order types (eg CUSTOMREL), you can also specify any parameter to tune the order type.
# For CUSTOMREL, tuning parameters are
# displaysize: take a positive integer value. If set to value >0, all orders are of a size = displaysize. For an original ordersize > displaysize, orders are split
# value : if value is specified, orders are sliced so that each order has a maximum value of exposure
# thresholdimpactcost:
# delay:
# suborderdelay:
# improveprob: 
# orderspermin:
# improveamt:
# stickyperiod:
# fatfingerwindow:
# An parameterized implementation of ordertype using CUSTOMREL could appear as below 
OrderType=CUSTOMREL:displaysize=0:value=80000:thresholdimpactcost=0.0:delay=20:suborderdelay=20:improveprob=0.50:orderspermin=10:improveamt=1:stickyperiod=30:fatfingerwindow=120


# ScaleEntry allows a symbol to have multiple entry orders. If ScaleEntry = FALSE, inStrat will only accept one order for a symbol. Any other entry order, whilst
# the position on account of the first order is still open, will be rejected. Set ScaleEntry=TRUE only if the strategy actually expects multiple scale-ins for
# a symbol. 
ScaleEntry=TRUE

# ScaleExit allows a symbol to have multiple exit orders. If ScaleExit = FALSE, inStrat will completely exit a position on an exit (SELL OR COVER) order. 
# Set ScaleExit=TRUE only if the strategy actually expects multiple scale-outs
ScaleExit=TRUE

# For orders containing symbols that are not in the original symbols file, inStrat needs to request market data.
# ConnectionIDForMarketData specifies the index of the connection (in the connections.csv) to be used for new market data.
# this index starts are 0. So if there are four connections in connections.csv, the maximum index can be 3.  
ConnectionIDForMarketData=0

# If iaemail value  is provided, alert for new orders are sent to iaemail.
# If iaemail value is not provided, alert for new orders is sent to the senderemailaddress specified in globalproperties.
iaemail=

# Additional parameters that are customized for a strategy can be written below this